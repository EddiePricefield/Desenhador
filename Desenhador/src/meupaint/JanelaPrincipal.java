/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package meupaint;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URI;
import java.util.List;
import java.util.Stack;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner.DefaultEditor;
import javax.swing.KeyStroke;

/**
 *
 * @author Eddie
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    private Forma forma;

    JanelaPilhas janelaPilhas = new JanelaPilhas(this);

    Color GREEN = new Color(20, 115, 49);
    Color ORANGE = new Color(201, 94, 8);

    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
        initComponents();
        ((DefaultEditor) ladosSpinner.getEditor()).getTextField().setEditable(false);
        visibilidadeLog(false);
        registrarKeyBidings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        painelDesenho = new meupaint.PainelDesenho();
        labelLog = new javax.swing.JLabel();
        panelFormas = new javax.swing.JPanel();
        btnPincel = new javax.swing.JToggleButton();
        btnBorracha = new javax.swing.JToggleButton();
        btnLinha = new javax.swing.JToggleButton();
        btnRetangulo = new javax.swing.JToggleButton();
        btnElipse = new javax.swing.JToggleButton();
        btnTriangulo = new javax.swing.JToggleButton();
        btnPoligono = new javax.swing.JToggleButton();
        ladosSpinner = new javax.swing.JSpinner();
        sliderContorno = new javax.swing.JSlider();
        painelContorno = new javax.swing.JPanel();
        painelPreenchimento = new javax.swing.JPanel();
        labelContorno = new javax.swing.JLabel();
        btnUndo = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        painelOpcoes = new javax.swing.JPanel();
        painelAvatar = new meupaint.PainelAvatar();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        subMenuNovo = new javax.swing.JMenuItem();
        subMenuAbrir = new javax.swing.JMenuItem();
        subMenuSalvar = new javax.swing.JMenuItem();
        subMenuExportar = new javax.swing.JMenuItem();
        menuFerramentas = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        checkLog = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Desenhador :3");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        painelDesenho.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        painelDesenho.setOpaque(false);
        painelDesenho.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                painelDesenhoMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                painelDesenhoMouseMoved(evt);
            }
        });
        painelDesenho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                painelDesenhoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                painelDesenhoMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                painelDesenhoMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                painelDesenhoMouseReleased(evt);
            }
        });

        labelLog.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelLog.setForeground(new java.awt.Color(204, 0, 0));
        labelLog.setText("Log de Formas");

        javax.swing.GroupLayout painelDesenhoLayout = new javax.swing.GroupLayout(painelDesenho);
        painelDesenho.setLayout(painelDesenhoLayout);
        painelDesenhoLayout.setHorizontalGroup(
            painelDesenhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDesenhoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelLog)
                .addContainerGap(1089, Short.MAX_VALUE))
        );
        painelDesenhoLayout.setVerticalGroup(
            painelDesenhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDesenhoLayout.createSequentialGroup()
                .addContainerGap(463, Short.MAX_VALUE)
                .addComponent(labelLog)
                .addContainerGap())
        );

        panelFormas.setBorder(javax.swing.BorderFactory.createTitledBorder("Formas"));

        buttonGroup.add(btnPincel);
        btnPincel.setSelected(true);
        btnPincel.setText("Pincel");
        btnPincel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPincel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPincelActionPerformed(evt);
            }
        });

        buttonGroup.add(btnBorracha);
        btnBorracha.setText("Borracha");
        btnBorracha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBorracha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrachaActionPerformed(evt);
            }
        });

        buttonGroup.add(btnLinha);
        btnLinha.setText("Linha");
        btnLinha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinhaActionPerformed(evt);
            }
        });

        buttonGroup.add(btnRetangulo);
        btnRetangulo.setText("Retângulo");
        btnRetangulo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRetangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetanguloActionPerformed(evt);
            }
        });

        buttonGroup.add(btnElipse);
        btnElipse.setText("Elipse");
        btnElipse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElipseActionPerformed(evt);
            }
        });

        buttonGroup.add(btnTriangulo);
        btnTriangulo.setText("Triângulo");
        btnTriangulo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTriangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrianguloActionPerformed(evt);
            }
        });

        buttonGroup.add(btnPoligono);
        btnPoligono.setText("Polígono");
        btnPoligono.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPoligono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPoligonoActionPerformed(evt);
            }
        });

        ladosSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 3, null, 1));
        ladosSpinner.setToolTipText("Lados do Polígono Regular");
        ladosSpinner.setFocusCycleRoot(true);
        ladosSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ladosSpinnerStateChanged(evt);
            }
        });

        sliderContorno.setMaximum(31);
        sliderContorno.setMinimum(2);
        sliderContorno.setToolTipText("Tamanho do Contorno");
        sliderContorno.setValue(2);
        sliderContorno.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sliderContorno.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderContornoStateChanged(evt);
            }
        });

        painelContorno.setBackground(new java.awt.Color(0, 0, 0));
        painelContorno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        painelContorno.setToolTipText("Cor do Contorno");
        painelContorno.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        painelContorno.setPreferredSize(new java.awt.Dimension(20, 20));
        painelContorno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelContornoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelContornoLayout = new javax.swing.GroupLayout(painelContorno);
        painelContorno.setLayout(painelContornoLayout);
        painelContornoLayout.setHorizontalGroup(
            painelContornoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        painelContornoLayout.setVerticalGroup(
            painelContornoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        painelPreenchimento.setBackground(new java.awt.Color(255, 255, 255));
        painelPreenchimento.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        painelPreenchimento.setToolTipText("Cor do Preenchimento");
        painelPreenchimento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        painelPreenchimento.setPreferredSize(new java.awt.Dimension(20, 20));
        painelPreenchimento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelPreenchimentoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelPreenchimentoLayout = new javax.swing.GroupLayout(painelPreenchimento);
        painelPreenchimento.setLayout(painelPreenchimentoLayout);
        painelPreenchimentoLayout.setHorizontalGroup(
            painelPreenchimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        painelPreenchimentoLayout.setVerticalGroup(
            painelPreenchimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        labelContorno.setText("1");

        btnUndo.setText("↩");
        btnUndo.setToolTipText("Desfazer");
        btnUndo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoActionPerformed(evt);
            }
        });

        btnRedo.setText("↪");
        btnRedo.setToolTipText("Refazer");
        btnRedo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedoActionPerformed(evt);
            }
        });

        btnRefresh.setText("Limpar Quadro");
        btnRefresh.setActionCommand("");
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFormasLayout = new javax.swing.GroupLayout(panelFormas);
        panelFormas.setLayout(panelFormasLayout);
        panelFormasLayout.setHorizontalGroup(
            panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPincel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBorracha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLinha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRetangulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnElipse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTriangulo)
                .addGap(5, 5, 5)
                .addComponent(btnPoligono)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ladosSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUndo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRedo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(painelContorno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelPreenchimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderContorno, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelContorno, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh)
                .addContainerGap())
        );
        panelFormasLayout.setVerticalGroup(
            panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnLinha)
                    .addComponent(btnRetangulo)
                    .addComponent(btnElipse)
                    .addComponent(painelContorno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painelPreenchimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sliderContorno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelContorno)
                    .addComponent(btnTriangulo)
                    .addComponent(btnPoligono)
                    .addComponent(ladosSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUndo)
                    .addComponent(btnRedo)
                    .addComponent(btnPincel)
                    .addComponent(btnBorracha)
                    .addComponent(btnRefresh))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelAvatar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        painelAvatar.setToolTipText("Desenvolvido por EddiePricefield");
        painelAvatar.setImagemParada(true);
        painelAvatar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                painelAvatarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                painelAvatarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                painelAvatarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout painelAvatarLayout = new javax.swing.GroupLayout(painelAvatar);
        painelAvatar.setLayout(painelAvatarLayout);
        painelAvatarLayout.setHorizontalGroup(
            painelAvatarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 74, Short.MAX_VALUE)
        );
        painelAvatarLayout.setVerticalGroup(
            painelAvatarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout painelOpcoesLayout = new javax.swing.GroupLayout(painelOpcoes);
        painelOpcoes.setLayout(painelOpcoesLayout);
        painelOpcoesLayout.setHorizontalGroup(
            painelOpcoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelOpcoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(painelAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        painelOpcoesLayout.setVerticalGroup(
            painelOpcoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelAvatar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuArquivo.setText("Arquivo");
        menuArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArquivoActionPerformed(evt);
            }
        });

        subMenuNovo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuNovo.setText("Novo Quadro de Desenho");
        subMenuNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuNovoActionPerformed(evt);
            }
        });
        menuArquivo.add(subMenuNovo);

        subMenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuAbrir.setText("Abrir Dados de Desenho");
        subMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuAbrirActionPerformed(evt);
            }
        });
        menuArquivo.add(subMenuAbrir);

        subMenuSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuSalvar.setText("Salvar Dados de Desenho");
        subMenuSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuSalvarActionPerformed(evt);
            }
        });
        menuArquivo.add(subMenuSalvar);

        subMenuExportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        subMenuExportar.setText("Exportar como PNG");
        subMenuExportar.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                subMenuExportarMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        subMenuExportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subMenuExportarMouseClicked(evt);
            }
        });
        subMenuExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuExportarActionPerformed(evt);
            }
        });
        menuArquivo.add(subMenuExportar);

        jMenuBar1.add(menuArquivo);

        menuFerramentas.setText("Ferramentas");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Depuração de Pilhas");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuFerramentas.add(jMenuItem1);

        checkLog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        checkLog.setText("Ativar Log");
        checkLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLogActionPerformed(evt);
            }
        });
        menuFerramentas.add(checkLog);

        jMenuBar1.add(menuFerramentas);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelFormas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelOpcoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(painelDesenho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelFormas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painelOpcoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelDesenho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void painelDesenhoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMousePressed

        if (btnLinha.isSelected()) {
            forma = new Linha(); //A linha é uma forma, então o objeto que a forma está apontando no Heap é do tipo Linha.
        } else if (btnRetangulo.isSelected()) {
            forma = new Retangulo(); //Caso selecione isso, ele começa a apontar para o objeto do tipo Retângulo
        } else if (btnElipse.isSelected()) {
            forma = new Elipse();
        } else if (btnTriangulo.isSelected()) {
            forma = new Triangulo();
        } else if (btnPoligono.isSelected()) {
            forma = new Poligono((int) (ladosSpinner.getValue()));
        } else if (btnPincel.isSelected()) {
            forma = new Pincel();
        } else if (btnBorracha.isSelected()) {
            forma = new Borracha();
        }

        forma.setTamanhoContorno(sliderContorno.getValue());
        forma.setX1(evt.getX());
        forma.setY1(evt.getY());
        forma.setContorno(painelContorno.getBackground());
        forma.setPreenchimento(painelPreenchimento.getBackground());

    }//GEN-LAST:event_painelDesenhoMousePressed

    private void painelDesenhoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMouseReleased

        forma.setX2(evt.getX());
        forma.setY2(evt.getY());
        painelDesenho.addFormaTemp(forma);
        painelDesenho.setFormaTemp(null);
        labelLog.setForeground(GREEN);
        labelLog.setText("Desenhou: " + painelDesenho.getLastForma().getClass().getSimpleName());

        janelaPilhas.setFormaDesfazer(painelDesenho.getLastForma().getClass().getSimpleName());
        janelaPilhas.setFormaRefazer("");

        painelDesenho.repaint();
        atualizarPilhas();

    }//GEN-LAST:event_painelDesenhoMouseReleased

    private void painelDesenhoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMouseDragged

        forma.setX2(evt.getX());
        forma.setY2(evt.getY());

        painelDesenho.setFormaTemp(forma);

        painelDesenho.repaint();

    }//GEN-LAST:event_painelDesenhoMouseDragged

    private void btnRetanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetanguloActionPerformed
        painelDesenho.setPincel(false);
        painelDesenho.setBorracha(false);
    }//GEN-LAST:event_btnRetanguloActionPerformed

    private void btnLinhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinhaActionPerformed
        painelDesenho.setPincel(false);
        painelDesenho.setBorracha(false);
    }//GEN-LAST:event_btnLinhaActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        painelDesenho.limparListas();
        labelLog.setForeground(Color.red);
        labelLog.setText("Limpou o Quadro de Desenho");

        if (painelDesenho.getStackTamanho(1) == 0 && painelDesenho.getStackTamanho(3) == 0) {
            janelaPilhas.setFormaDesfazer("");
        } else {
            janelaPilhas.setFormaDesfazer("RedesenharTudo");
        }

        janelaPilhas.setFormaRefazer("");

        atualizarPilhas();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElipseActionPerformed
        painelDesenho.setPincel(false);
        painelDesenho.setBorracha(false);
    }//GEN-LAST:event_btnElipseActionPerformed

    private void painelContornoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelContornoMouseClicked

        Color c = JColorChooser.showDialog(
                this,
                "Cor do Contorno",
                painelContorno.getBackground());

        if (c != null) {
            painelContorno.setBackground(c);

        }

        labelLog.setForeground(Color.DARK_GRAY);
        labelLog.setText("Informação: Alterou a cor do contorno");

        painelDesenho.setCorPincel(painelContorno.getBackground());
        painelDesenho.repaint();

    }//GEN-LAST:event_painelContornoMouseClicked

    private void painelPreenchimentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelPreenchimentoMouseClicked

        Color c = JColorChooser.showDialog(
                this,
                "Cor do Preenchimento",
                painelPreenchimento.getBackground());

        if (c != null) {
            painelPreenchimento.setBackground(c);
        }

        labelLog.setForeground(Color.DARK_GRAY);
        labelLog.setText("Informação: Alterou a cor do preenchimento");

        painelDesenho.repaint();

    }//GEN-LAST:event_painelPreenchimentoMouseClicked

    private void sliderContornoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderContornoStateChanged

        painelDesenho.setTamanhoPincel(sliderContorno.getValue());
        painelDesenho.repaint();

        labelContorno.setText((String.valueOf(sliderContorno.getValue() - 1)));

        labelLog.setForeground(Color.DARK_GRAY);
        labelLog.setText("Informação: Alterou o tamanho do contorno");

    }//GEN-LAST:event_sliderContornoStateChanged

    private void painelAvatarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelAvatarMouseEntered

        painelAvatar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        painelAvatar.setImagemParada(false);
        painelAvatar.repaint();

    }//GEN-LAST:event_painelAvatarMouseEntered

    private void painelAvatarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelAvatarMouseExited

        painelAvatar.setImagemParada(true);
        painelAvatar.repaint();

    }//GEN-LAST:event_painelAvatarMouseExited

    private void btnUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoActionPerformed
        painelDesenho.desfazer();

        if (painelDesenho.retornarEstado() == 1) {
            labelLog.setForeground(ORANGE);
            labelLog.setText("Desfez o Limpar Quadro");
        } else if (painelDesenho.retornarEstado() == 2) {
            labelLog.setForeground(ORANGE);
            labelLog.setText("Desfez: " + painelDesenho.redoFormaPeek().getClass().getSimpleName());
        } else {
            labelLog.setForeground(Color.DARK_GRAY);
            labelLog.setText("Informação: Não há formas para desfazer");
        }
        atualizarDesenhosPilhas();
        atualizarPilhas();

    }//GEN-LAST:event_btnUndoActionPerformed

    private void btnRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedoActionPerformed
        painelDesenho.refazer();

        if (painelDesenho.retornarEstado() == 3) {
            labelLog.setForeground(Color.BLUE);
            labelLog.setText("Refez o Limpar Quadro");
        } else if (painelDesenho.retornarEstado() == 4) {
            labelLog.setForeground(Color.BLUE);
            labelLog.setText("Refez: " + painelDesenho.undoFormaPeek().getClass().getSimpleName());
        } else {
            labelLog.setForeground(Color.DARK_GRAY);
            labelLog.setText("Informação: Não há formas para refazer");
        }
        atualizarDesenhosPilhas();
        atualizarPilhas();

    }//GEN-LAST:event_btnRedoActionPerformed

    private void btnPincelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPincelActionPerformed
        painelDesenho.setPincel(btnPincel.isSelected());
        painelDesenho.setTamanhoPincel(sliderContorno.getValue());
        painelDesenho.repaint();
    }//GEN-LAST:event_btnPincelActionPerformed

    private void btnBorrachaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrachaActionPerformed
        painelDesenho.setBorracha(btnBorracha.isSelected());
        painelDesenho.setTamanhoPincel(sliderContorno.getValue());
        painelDesenho.repaint();
    }//GEN-LAST:event_btnBorrachaActionPerformed

    private void ladosSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ladosSpinnerStateChanged
        labelLog.setForeground(Color.DARK_GRAY);
        labelLog.setText("Informação: Alterou o número de lados do polígono");
    }//GEN-LAST:event_ladosSpinnerStateChanged

    private void painelAvatarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelAvatarMouseClicked
        labelLog.setForeground(Color.BLACK);
        labelLog.setText("Abrindo link do Github...");

        try {
            URI link = new URI("https://github.com/EddiePricefield");
            Desktop.getDesktop().browse(link);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_painelAvatarMouseClicked

    private void painelDesenhoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMouseEntered

        if (btnPincel.isSelected()) {
            Image imagemPincel = new ImageIcon(getClass().getResource("/images/pincel.png")).getImage();
            painelDesenho.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(imagemPincel, new Point(0, 0), "CursorPincel"));
        } else if (btnBorracha.isSelected()) {
            Image imagemBorracha = new ImageIcon(getClass().getResource("/images/borracha.png")).getImage();
            painelDesenho.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(imagemBorracha, new Point(0, 0), "CursorBorracha"));
        } else {
            painelDesenho.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        }

        painelDesenho.setCorPincel(painelContorno.getBackground());
        painelDesenho.repaint();
    }//GEN-LAST:event_painelDesenhoMouseEntered

    private void painelDesenhoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMouseMoved


    }//GEN-LAST:event_painelDesenhoMouseMoved

    private void painelDesenhoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMouseExited
        painelDesenho.setCorPincel(new Color(0, 0, 0, 0));
        painelDesenho.repaint();
    }//GEN-LAST:event_painelDesenhoMouseExited

    private void btnTrianguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrianguloActionPerformed
        painelDesenho.setPincel(false);
        painelDesenho.setBorracha(false);
    }//GEN-LAST:event_btnTrianguloActionPerformed

    private void btnPoligonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPoligonoActionPerformed
        painelDesenho.setPincel(false);
        painelDesenho.setBorracha(false);
    }//GEN-LAST:event_btnPoligonoActionPerformed

    private void subMenuExportarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subMenuExportarMouseClicked
        
    }//GEN-LAST:event_subMenuExportarMouseClicked

    private void subMenuExportarMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_subMenuExportarMenuKeyPressed
        
    }//GEN-LAST:event_subMenuExportarMenuKeyPressed

    private void subMenuExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuExportarActionPerformed
        exportarDesenho();
    }//GEN-LAST:event_subMenuExportarActionPerformed

    private void subMenuSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuSalvarActionPerformed
        salvarDesenho();
    }//GEN-LAST:event_subMenuSalvarActionPerformed

    private void subMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuAbrirActionPerformed
        try {
            abrirDesenho();
        } catch (ClassNotFoundException ex) {
            System.getLogger(JanelaPrincipal.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            labelLog.setForeground(Color.RED);
            labelLog.setText("Erro ao abrir os dados do desenho");
        }
    }//GEN-LAST:event_subMenuAbrirActionPerformed

    private void menuArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArquivoActionPerformed

    }//GEN-LAST:event_menuArquivoActionPerformed

    private void subMenuNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subMenuNovoActionPerformed
        
        JOptionPane.showConfirmDialog(null, "Esta ação irá apagar todo o Quadro de Desenho. Você tem certeza?", "Criar Novo Quadro", JOptionPane.YES_NO_OPTION);
        
        if(JOptionPane.YES_OPTION == 0){
            painelDesenho.limparStacks();
            atualizarPilhas();
            atualizarDesenhosPilhas();
            labelLog.setForeground(Color.DARK_GRAY);
            labelLog.setText("Informação: Criou um Novo Quadro de Desenho");
        }
    }//GEN-LAST:event_subMenuNovoActionPerformed

    private void checkLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLogActionPerformed
        visibilidadeLog(checkLog.isSelected());
    }//GEN-LAST:event_checkLogActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        janelaPilhas.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void visibilidadeLog(boolean valor) {
        labelLog.setVisible(valor);
        labelLog.revalidate();
    }

//    public void ativarLimparAlternativo(boolean valor) {
//        painelDesenho.setLimparAlternativo(valor);
//    }

//    public void logLimparAlternativo() {
//        if (painelDesenho.getLimparAlternativo()) {
//            labelLog.setForeground(Color.DARK_GRAY);
//            labelLog.setText("Informação: Ativou o \"Limpar Alternativo\"");
//        } else {
//            labelLog.setForeground(Color.DARK_GRAY);
//            labelLog.setText("Informação: Desativou o \"Limpar Alternativo\"");
//        }
//    }

    public int tamanhoStacks(int stackNum) {
        return painelDesenho.getStackTamanho(stackNum);
    }

    public void atualizarPilhas() {
        if (janelaPilhas != null) {
            janelaPilhas.repaint(); // redesenha a janela inteira
        }
    }

    private void atualizarDesenhosPilhas() {

        if (painelDesenho.getStackTamanho(1) > 0) {
            janelaPilhas.setFormaDesfazer(painelDesenho.undoFormaPeek().getClass().getSimpleName());
        } else if (painelDesenho.getStackTamanho(3) > 0) {
            janelaPilhas.setFormaDesfazer("RedesenharTudo");
        } else {
            janelaPilhas.setFormaDesfazer("");
        }

        if (painelDesenho.getStackTamanho(2) > 0) {
            janelaPilhas.setFormaRefazer(painelDesenho.redoFormaPeek().getClass().getSimpleName());
        } else if (painelDesenho.getStackTamanho(4) > 0) {
            janelaPilhas.setFormaRefazer("LimparTudo");
        } else {
            janelaPilhas.setFormaRefazer("");
        }

    }

    public void limparStacks() {
        painelDesenho.limparStacks();
    }
    
    public void exportarDesenho() {
        painelDesenho.setTamanhoPincel(0);

        BufferedImage bImg = new BufferedImage(painelDesenho.getWidth(), painelDesenho.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2cg = bImg.createGraphics();
        painelDesenho.paintAll(g2cg);
        g2cg.dispose();

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Exportar desenho como PNG...");
        fileChooser.setSelectedFile(new File("desenho.png"));

        if (fileChooser.showSaveDialog(painelDesenho) == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            if (!fileToSave.getName().toLowerCase().endsWith(".png")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".png");
            }

            try {
                ImageIO.write(bImg, "png", fileToSave);
                labelLog.setForeground(Color.DARK_GRAY);
                labelLog.setText("Informação: Desenho exportado como PNG");
            } catch (IOException ex) {
                System.getLogger(JanelaPrincipal.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
                labelLog.setForeground(Color.RED);
                labelLog.setText("Erro ao salvar o desenho como PNG");
            }

        }
        
        painelDesenho.setTamanhoPincel(sliderContorno.getValue());
    }
    
    public void salvarDesenho() {
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Salvar desenho como...");
        fileChooser.setSelectedFile(new File("desenho.dat"));

        if (fileChooser.showSaveDialog(painelDesenho) == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            if (!fileToSave.getName().toLowerCase().endsWith(".dat")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".dat");
            }

            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileToSave))){
                
                oos.writeObject(painelDesenho.getFormas());
                oos.writeObject(painelDesenho.getRedoForma());
                oos.writeObject(painelDesenho.getUndoForma());
                oos.writeObject(painelDesenho.getRedoTudo());
                oos.writeObject(painelDesenho.getUndoTudo());
                
                labelLog.setForeground(Color.DARK_GRAY);
                labelLog.setText("Informação: Desenho teve os seus dados salvos");
            } catch (IOException ex) {
                System.getLogger(JanelaPrincipal.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
                labelLog.setForeground(Color.RED);
                labelLog.setText("Erro ao salvar os dados do desenho");
            }

        }
        
    }
    
    public void abrirDesenho() throws ClassNotFoundException{
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Salvar desenho como...");
        fileChooser.setSelectedFile(new File("desenho.dat"));

        if (fileChooser.showOpenDialog(painelDesenho) == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = fileChooser.getSelectedFile();

            if (!fileToOpen.getName().toLowerCase().endsWith(".dat")) {
                fileToOpen = new File(fileToOpen.getAbsolutePath() + ".dat");
            }
            
            painelDesenho.limparListas();
            atualizarPilhas();
            atualizarDesenhosPilhas();

            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileToOpen))) {

                painelDesenho.setFormas((List<Forma>) ois.readObject());
                painelDesenho.setRedoForma((Stack<Forma>) ois.readObject());
                painelDesenho.setUndoForma((Stack<Forma>) ois.readObject());
                painelDesenho.setRedoTudo((Stack<Stack<Forma>>) ois.readObject());
                painelDesenho.setUndoTudo((Stack<Stack<Forma>>) ois.readObject());

                labelLog.setForeground(Color.DARK_GRAY);
                labelLog.setText("Informação: Os dados de um desenho foram abertos");
            } catch (IOException ex) {
                System.getLogger(JanelaPrincipal.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
                labelLog.setForeground(Color.RED);
                labelLog.setText("Erro ao abrir os dados do desenho");
            }

        }  
        
        atualizarPilhas();
        atualizarDesenhosPilhas();
        
    }

    private void registrarKeyBidings() {
        InputMap im = painelDesenho.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap am = painelDesenho.getActionMap();

        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_DOWN_MASK), "desfazer");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, KeyEvent.CTRL_DOWN_MASK), "refazer");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ADD, KeyEvent.CTRL_DOWN_MASK), "aumentarContorno");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK), "aumentarContorno");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, KeyEvent.CTRL_DOWN_MASK), "diminuirContorno");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT, KeyEvent.CTRL_DOWN_MASK), "diminuirContorno");

        am.put("desfazer", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                painelDesenho.desfazer();

                if (painelDesenho.retornarEstado() == 1) {
                    labelLog.setForeground(ORANGE);
                    labelLog.setText("Desfez o Limpar Quadro");
                } else if (painelDesenho.retornarEstado() == 2) {
                    labelLog.setForeground(ORANGE);
                    labelLog.setText("Desfez: " + painelDesenho.redoFormaPeek().getClass().getSimpleName());
                } else {
                    labelLog.setForeground(Color.DARK_GRAY);
                    labelLog.setText("Informação: Não há formas para desfazer");
                }
                atualizarDesenhosPilhas();
                atualizarPilhas();
            }
        });

        am.put("refazer", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                painelDesenho.refazer();

                if (painelDesenho.retornarEstado() == 3) {
                    labelLog.setForeground(Color.BLUE);
                    labelLog.setText("Refez o Limpar Quadro");
                } else if (painelDesenho.retornarEstado() == 4) {
                    labelLog.setForeground(Color.BLUE);
                    labelLog.setText("Refez: " + painelDesenho.undoFormaPeek().getClass().getSimpleName());
                } else {
                    labelLog.setForeground(Color.DARK_GRAY);
                    labelLog.setText("Informação: Não há formas para refazer");
                }
                atualizarDesenhosPilhas();
                atualizarPilhas();
            }
        });

        am.put("aumentarContorno", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (sliderContorno.getValue() <= 30) {
                    sliderContorno.setValue(sliderContorno.getValue() + 1);
                }

            }
        });

        am.put("diminuirContorno", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (sliderContorno.getValue() > 0) {
                    sliderContorno.setValue(sliderContorno.getValue() - 1);
                }

            }
        });
        

//        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnBorracha;
    private javax.swing.JToggleButton btnElipse;
    private javax.swing.JToggleButton btnLinha;
    private javax.swing.JToggleButton btnPincel;
    private javax.swing.JToggleButton btnPoligono;
    private javax.swing.JButton btnRedo;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JToggleButton btnRetangulo;
    private javax.swing.JToggleButton btnTriangulo;
    private javax.swing.JButton btnUndo;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JCheckBoxMenuItem checkLog;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel labelContorno;
    private javax.swing.JLabel labelLog;
    private javax.swing.JSpinner ladosSpinner;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenu menuFerramentas;
    private meupaint.PainelAvatar painelAvatar;
    private javax.swing.JPanel painelContorno;
    private meupaint.PainelDesenho painelDesenho;
    private javax.swing.JPanel painelOpcoes;
    private javax.swing.JPanel painelPreenchimento;
    private javax.swing.JPanel panelFormas;
    private javax.swing.JSlider sliderContorno;
    private javax.swing.JMenuItem subMenuAbrir;
    private javax.swing.JMenuItem subMenuExportar;
    private javax.swing.JMenuItem subMenuNovo;
    private javax.swing.JMenuItem subMenuSalvar;
    // End of variables declaration//GEN-END:variables
}
